// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks_repositories

import (
	entities "nashrul-be/crm/entities"

	mock "github.com/stretchr/testify/mock"
)

// RoleRepositoryInterface is an autogenerated mock type for the RoleRepositoryInterface type
type RoleRepositoryInterface struct {
	mock.Mock
}

type RoleRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleRepositoryInterface) EXPECT() *RoleRepositoryInterface_Expecter {
	return &RoleRepositoryInterface_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: id
func (_m *RoleRepositoryInterface) GetByID(id uint) (entities.Role, error) {
	ret := _m.Called(id)

	var r0 entities.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.Role, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.Role); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Role)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleRepositoryInterface_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type RoleRepositoryInterface_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uint
func (_e *RoleRepositoryInterface_Expecter) GetByID(id interface{}) *RoleRepositoryInterface_GetByID_Call {
	return &RoleRepositoryInterface_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *RoleRepositoryInterface_GetByID_Call) Run(run func(id uint)) *RoleRepositoryInterface_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RoleRepositoryInterface_GetByID_Call) Return(role entities.Role, err error) *RoleRepositoryInterface_GetByID_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *RoleRepositoryInterface_GetByID_Call) RunAndReturn(run func(uint) (entities.Role, error)) *RoleRepositoryInterface_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRoleRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleRepositoryInterface creates a new instance of RoleRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleRepositoryInterface(t mockConstructorTestingTNewRoleRepositoryInterface) *RoleRepositoryInterface {
	mock := &RoleRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
