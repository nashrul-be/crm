// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks_repositories

import (
	entities "nashrul-be/crm/entities"

	mock "github.com/stretchr/testify/mock"
)

// CustomerRepositoryInterface is an autogenerated mock type for the CustomerRepositoryInterface type
type CustomerRepositoryInterface struct {
	mock.Mock
}

type CustomerRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerRepositoryInterface) EXPECT() *CustomerRepositoryInterface_Expecter {
	return &CustomerRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: customer
func (_m *CustomerRepositoryInterface) Create(customer entities.Customer) (entities.Customer, error) {
	ret := _m.Called(customer)

	var r0 entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Customer) (entities.Customer, error)); ok {
		return rf(customer)
	}
	if rf, ok := ret.Get(0).(func(entities.Customer) entities.Customer); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Get(0).(entities.Customer)
	}

	if rf, ok := ret.Get(1).(func(entities.Customer) error); ok {
		r1 = rf(customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CustomerRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - customer entities.Customer
func (_e *CustomerRepositoryInterface_Expecter) Create(customer interface{}) *CustomerRepositoryInterface_Create_Call {
	return &CustomerRepositoryInterface_Create_Call{Call: _e.mock.On("Create", customer)}
}

func (_c *CustomerRepositoryInterface_Create_Call) Run(run func(customer entities.Customer)) *CustomerRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Customer))
	})
	return _c
}

func (_c *CustomerRepositoryInterface_Create_Call) Return(result entities.Customer, err error) *CustomerRepositoryInterface_Create_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *CustomerRepositoryInterface_Create_Call) RunAndReturn(run func(entities.Customer) (entities.Customer, error)) *CustomerRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *CustomerRepositoryInterface) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerRepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CustomerRepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *CustomerRepositoryInterface_Expecter) Delete(id interface{}) *CustomerRepositoryInterface_Delete_Call {
	return &CustomerRepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *CustomerRepositoryInterface_Delete_Call) Run(run func(id uint)) *CustomerRepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *CustomerRepositoryInterface_Delete_Call) Return(err error) *CustomerRepositoryInterface_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CustomerRepositoryInterface_Delete_Call) RunAndReturn(run func(uint) error) *CustomerRepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: limit, offset
func (_m *CustomerRepositoryInterface) GetAll(limit uint, offset uint) ([]entities.Customer, error) {
	ret := _m.Called(limit, offset)

	var r0 []entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) ([]entities.Customer, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []entities.Customer); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepositoryInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type CustomerRepositoryInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - limit uint
//   - offset uint
func (_e *CustomerRepositoryInterface_Expecter) GetAll(limit interface{}, offset interface{}) *CustomerRepositoryInterface_GetAll_Call {
	return &CustomerRepositoryInterface_GetAll_Call{Call: _e.mock.On("GetAll", limit, offset)}
}

func (_c *CustomerRepositoryInterface_GetAll_Call) Run(run func(limit uint, offset uint)) *CustomerRepositoryInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *CustomerRepositoryInterface_GetAll_Call) Return(customers []entities.Customer, err error) *CustomerRepositoryInterface_GetAll_Call {
	_c.Call.Return(customers, err)
	return _c
}

func (_c *CustomerRepositoryInterface_GetAll_Call) RunAndReturn(run func(uint, uint) ([]entities.Customer, error)) *CustomerRepositoryInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByEmail provides a mock function with given fields: email, limit, offset
func (_m *CustomerRepositoryInterface) GetAllByEmail(email string, limit uint, offset uint) ([]entities.Customer, error) {
	ret := _m.Called(email, limit, offset)

	var r0 []entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint, uint) ([]entities.Customer, error)); ok {
		return rf(email, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, uint, uint) []entities.Customer); ok {
		r0 = rf(email, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint, uint) error); ok {
		r1 = rf(email, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepositoryInterface_GetAllByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByEmail'
type CustomerRepositoryInterface_GetAllByEmail_Call struct {
	*mock.Call
}

// GetAllByEmail is a helper method to define mock.On call
//   - email string
//   - limit uint
//   - offset uint
func (_e *CustomerRepositoryInterface_Expecter) GetAllByEmail(email interface{}, limit interface{}, offset interface{}) *CustomerRepositoryInterface_GetAllByEmail_Call {
	return &CustomerRepositoryInterface_GetAllByEmail_Call{Call: _e.mock.On("GetAllByEmail", email, limit, offset)}
}

func (_c *CustomerRepositoryInterface_GetAllByEmail_Call) Run(run func(email string, limit uint, offset uint)) *CustomerRepositoryInterface_GetAllByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint), args[2].(uint))
	})
	return _c
}

func (_c *CustomerRepositoryInterface_GetAllByEmail_Call) Return(customers []entities.Customer, err error) *CustomerRepositoryInterface_GetAllByEmail_Call {
	_c.Call.Return(customers, err)
	return _c
}

func (_c *CustomerRepositoryInterface_GetAllByEmail_Call) RunAndReturn(run func(string, uint, uint) ([]entities.Customer, error)) *CustomerRepositoryInterface_GetAllByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByName provides a mock function with given fields: name, limit, offset
func (_m *CustomerRepositoryInterface) GetAllByName(name string, limit uint, offset uint) ([]entities.Customer, error) {
	ret := _m.Called(name, limit, offset)

	var r0 []entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint, uint) ([]entities.Customer, error)); ok {
		return rf(name, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, uint, uint) []entities.Customer); ok {
		r0 = rf(name, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint, uint) error); ok {
		r1 = rf(name, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepositoryInterface_GetAllByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByName'
type CustomerRepositoryInterface_GetAllByName_Call struct {
	*mock.Call
}

// GetAllByName is a helper method to define mock.On call
//   - name string
//   - limit uint
//   - offset uint
func (_e *CustomerRepositoryInterface_Expecter) GetAllByName(name interface{}, limit interface{}, offset interface{}) *CustomerRepositoryInterface_GetAllByName_Call {
	return &CustomerRepositoryInterface_GetAllByName_Call{Call: _e.mock.On("GetAllByName", name, limit, offset)}
}

func (_c *CustomerRepositoryInterface_GetAllByName_Call) Run(run func(name string, limit uint, offset uint)) *CustomerRepositoryInterface_GetAllByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint), args[2].(uint))
	})
	return _c
}

func (_c *CustomerRepositoryInterface_GetAllByName_Call) Return(customers []entities.Customer, err error) *CustomerRepositoryInterface_GetAllByName_Call {
	_c.Call.Return(customers, err)
	return _c
}

func (_c *CustomerRepositoryInterface_GetAllByName_Call) RunAndReturn(run func(string, uint, uint) ([]entities.Customer, error)) *CustomerRepositoryInterface_GetAllByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *CustomerRepositoryInterface) GetByID(id uint) (entities.Customer, error) {
	ret := _m.Called(id)

	var r0 entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.Customer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Customer)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepositoryInterface_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type CustomerRepositoryInterface_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uint
func (_e *CustomerRepositoryInterface_Expecter) GetByID(id interface{}) *CustomerRepositoryInterface_GetByID_Call {
	return &CustomerRepositoryInterface_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *CustomerRepositoryInterface_GetByID_Call) Run(run func(id uint)) *CustomerRepositoryInterface_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *CustomerRepositoryInterface_GetByID_Call) Return(customer entities.Customer, err error) *CustomerRepositoryInterface_GetByID_Call {
	_c.Call.Return(customer, err)
	return _c
}

func (_c *CustomerRepositoryInterface_GetByID_Call) RunAndReturn(run func(uint) (entities.Customer, error)) *CustomerRepositoryInterface_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// IsEmailExist provides a mock function with given fields: customer
func (_m *CustomerRepositoryInterface) IsEmailExist(customer entities.Customer) (bool, error) {
	ret := _m.Called(customer)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Customer) (bool, error)); ok {
		return rf(customer)
	}
	if rf, ok := ret.Get(0).(func(entities.Customer) bool); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(entities.Customer) error); ok {
		r1 = rf(customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepositoryInterface_IsEmailExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmailExist'
type CustomerRepositoryInterface_IsEmailExist_Call struct {
	*mock.Call
}

// IsEmailExist is a helper method to define mock.On call
//   - customer entities.Customer
func (_e *CustomerRepositoryInterface_Expecter) IsEmailExist(customer interface{}) *CustomerRepositoryInterface_IsEmailExist_Call {
	return &CustomerRepositoryInterface_IsEmailExist_Call{Call: _e.mock.On("IsEmailExist", customer)}
}

func (_c *CustomerRepositoryInterface_IsEmailExist_Call) Run(run func(customer entities.Customer)) *CustomerRepositoryInterface_IsEmailExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Customer))
	})
	return _c
}

func (_c *CustomerRepositoryInterface_IsEmailExist_Call) Return(_a0 bool, _a1 error) *CustomerRepositoryInterface_IsEmailExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepositoryInterface_IsEmailExist_Call) RunAndReturn(run func(entities.Customer) (bool, error)) *CustomerRepositoryInterface_IsEmailExist_Call {
	_c.Call.Return(run)
	return _c
}

// IsExist provides a mock function with given fields: id
func (_m *CustomerRepositoryInterface) IsExist(id uint) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepositoryInterface_IsExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExist'
type CustomerRepositoryInterface_IsExist_Call struct {
	*mock.Call
}

// IsExist is a helper method to define mock.On call
//   - id uint
func (_e *CustomerRepositoryInterface_Expecter) IsExist(id interface{}) *CustomerRepositoryInterface_IsExist_Call {
	return &CustomerRepositoryInterface_IsExist_Call{Call: _e.mock.On("IsExist", id)}
}

func (_c *CustomerRepositoryInterface_IsExist_Call) Run(run func(id uint)) *CustomerRepositoryInterface_IsExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *CustomerRepositoryInterface_IsExist_Call) Return(exist bool, err error) *CustomerRepositoryInterface_IsExist_Call {
	_c.Call.Return(exist, err)
	return _c
}

func (_c *CustomerRepositoryInterface_IsExist_Call) RunAndReturn(run func(uint) (bool, error)) *CustomerRepositoryInterface_IsExist_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: customer
func (_m *CustomerRepositoryInterface) Save(customer entities.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerRepositoryInterface_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type CustomerRepositoryInterface_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - customer entities.Customer
func (_e *CustomerRepositoryInterface_Expecter) Save(customer interface{}) *CustomerRepositoryInterface_Save_Call {
	return &CustomerRepositoryInterface_Save_Call{Call: _e.mock.On("Save", customer)}
}

func (_c *CustomerRepositoryInterface_Save_Call) Run(run func(customer entities.Customer)) *CustomerRepositoryInterface_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Customer))
	})
	return _c
}

func (_c *CustomerRepositoryInterface_Save_Call) Return(err error) *CustomerRepositoryInterface_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CustomerRepositoryInterface_Save_Call) RunAndReturn(run func(entities.Customer) error) *CustomerRepositoryInterface_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: customer
func (_m *CustomerRepositoryInterface) Update(customer entities.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CustomerRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - customer entities.Customer
func (_e *CustomerRepositoryInterface_Expecter) Update(customer interface{}) *CustomerRepositoryInterface_Update_Call {
	return &CustomerRepositoryInterface_Update_Call{Call: _e.mock.On("Update", customer)}
}

func (_c *CustomerRepositoryInterface_Update_Call) Run(run func(customer entities.Customer)) *CustomerRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Customer))
	})
	return _c
}

func (_c *CustomerRepositoryInterface_Update_Call) Return(err error) *CustomerRepositoryInterface_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CustomerRepositoryInterface_Update_Call) RunAndReturn(run func(entities.Customer) error) *CustomerRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCustomerRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerRepositoryInterface creates a new instance of CustomerRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerRepositoryInterface(t mockConstructorTestingTNewCustomerRepositoryInterface) *CustomerRepositoryInterface {
	mock := &CustomerRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
