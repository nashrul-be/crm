// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks_db

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// Transactor is an autogenerated mock type for the Transactor type
type Transactor struct {
	mock.Mock
}

type Transactor_Expecter struct {
	mock *mock.Mock
}

func (_m *Transactor) EXPECT() *Transactor_Expecter {
	return &Transactor_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with given fields:
func (_m *Transactor) Commit() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Transactor_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Transactor_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *Transactor_Expecter) Commit() *Transactor_Commit_Call {
	return &Transactor_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *Transactor_Commit_Call) Run(run func()) *Transactor_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transactor_Commit_Call) Return(_a0 *gorm.DB) *Transactor_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactor_Commit_Call) RunAndReturn(run func() *gorm.DB) *Transactor_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields:
func (_m *Transactor) GetDB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Transactor_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type Transactor_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
func (_e *Transactor_Expecter) GetDB() *Transactor_GetDB_Call {
	return &Transactor_GetDB_Call{Call: _e.mock.On("GetDB")}
}

func (_c *Transactor_GetDB_Call) Run(run func()) *Transactor_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transactor_GetDB_Call) Return(_a0 *gorm.DB) *Transactor_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactor_GetDB_Call) RunAndReturn(run func() *gorm.DB) *Transactor_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields:
func (_m *Transactor) Rollback() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Transactor_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type Transactor_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *Transactor_Expecter) Rollback() *Transactor_Rollback_Call {
	return &Transactor_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *Transactor_Rollback_Call) Run(run func()) *Transactor_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transactor_Rollback_Call) Return(_a0 *gorm.DB) *Transactor_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactor_Rollback_Call) RunAndReturn(run func() *gorm.DB) *Transactor_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTransactor interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactor creates a new instance of Transactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactor(t mockConstructorTestingTNewTransactor) *Transactor {
	mock := &Transactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
